// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.22.0-devel
// 	protoc        (unknown)
// source: protobuf/clientModelsDLock.proto

package protobuf

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ClientAcquireDLockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the name of lockName
	LockName string `protobuf:"bytes,1,opt,name=lockName,proto3" json:"lockName,omitempty"`
	// the suffix for clientId (ip+suffix)
	ClientIDSuffix string `protobuf:"bytes,2,opt,name=clientIDSuffix,proto3" json:"clientIDSuffix,omitempty"`
	// the expire of dlock, format: ns
	Expire int64 `protobuf:"varint,3,opt,name=expire,proto3" json:"expire,omitempty"`
	// the sequence of acquirement
	// if this field is not 0, then refresh acquirement will be triggered
	Sequence uint32 `protobuf:"varint,4,opt,name=sequence,proto3" json:"sequence,omitempty"`
}

func (x *ClientAcquireDLockRequest) Reset() {
	*x = ClientAcquireDLockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_clientModelsDLock_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientAcquireDLockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientAcquireDLockRequest) ProtoMessage() {}

func (x *ClientAcquireDLockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_clientModelsDLock_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientAcquireDLockRequest.ProtoReflect.Descriptor instead.
func (*ClientAcquireDLockRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_clientModelsDLock_proto_rawDescGZIP(), []int{0}
}

func (x *ClientAcquireDLockRequest) GetLockName() string {
	if x != nil {
		return x.LockName
	}
	return ""
}

func (x *ClientAcquireDLockRequest) GetClientIDSuffix() string {
	if x != nil {
		return x.ClientIDSuffix
	}
	return ""
}

func (x *ClientAcquireDLockRequest) GetExpire() int64 {
	if x != nil {
		return x.Expire
	}
	return 0
}

func (x *ClientAcquireDLockRequest) GetSequence() uint32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

type ClientAcquireDLockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// boolean indicator, whether the dlock acquirement is pending or not
	// once pending == false, client begin to query the dlock state and find whether its dlock is functioning
	Pending bool `protobuf:"varint,1,opt,name=pending,proto3" json:"pending,omitempty"`
	// sequence number, only return if pending = true (dlock is occupied)
	Sequence uint32 `protobuf:"varint,2,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// if the requested peer is not the current leader, return the leader ip:port
	CurrentLeader string `protobuf:"bytes,3,opt,name=currentLeader,proto3" json:"currentLeader,omitempty"`
}

func (x *ClientAcquireDLockResponse) Reset() {
	*x = ClientAcquireDLockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_clientModelsDLock_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientAcquireDLockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientAcquireDLockResponse) ProtoMessage() {}

func (x *ClientAcquireDLockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_clientModelsDLock_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientAcquireDLockResponse.ProtoReflect.Descriptor instead.
func (*ClientAcquireDLockResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_clientModelsDLock_proto_rawDescGZIP(), []int{1}
}

func (x *ClientAcquireDLockResponse) GetPending() bool {
	if x != nil {
		return x.Pending
	}
	return false
}

func (x *ClientAcquireDLockResponse) GetSequence() uint32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *ClientAcquireDLockResponse) GetCurrentLeader() string {
	if x != nil {
		return x.CurrentLeader
	}
	return ""
}

type ClientQueryDLockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the name of lockName
	LockName string `protobuf:"bytes,1,opt,name=lockName,proto3" json:"lockName,omitempty"`
}

func (x *ClientQueryDLockRequest) Reset() {
	*x = ClientQueryDLockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_clientModelsDLock_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientQueryDLockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientQueryDLockRequest) ProtoMessage() {}

func (x *ClientQueryDLockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_clientModelsDLock_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientQueryDLockRequest.ProtoReflect.Descriptor instead.
func (*ClientQueryDLockRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_clientModelsDLock_proto_rawDescGZIP(), []int{2}
}

func (x *ClientQueryDLockRequest) GetLockName() string {
	if x != nil {
		return x.LockName
	}
	return ""
}

type ClientQueryDLockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// current owner, "" for nobody (not acquired yet)
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	// dlock nonce
	Nonce uint32 `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// the timestamp when dlock last refreshed, format: ns
	Timestamp int64 `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// the current dlock expire, format: ns
	Expire int64 `protobuf:"varint,4,opt,name=expire,proto3" json:"expire,omitempty"`
	// the pending acquirement number
	// return a non-negative number only when client ask the leader
	PendingNum int32 `protobuf:"varint,5,opt,name=pendingNum,proto3" json:"pendingNum,omitempty"`
}

func (x *ClientQueryDLockResponse) Reset() {
	*x = ClientQueryDLockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_clientModelsDLock_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientQueryDLockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientQueryDLockResponse) ProtoMessage() {}

func (x *ClientQueryDLockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_clientModelsDLock_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientQueryDLockResponse.ProtoReflect.Descriptor instead.
func (*ClientQueryDLockResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_clientModelsDLock_proto_rawDescGZIP(), []int{3}
}

func (x *ClientQueryDLockResponse) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *ClientQueryDLockResponse) GetNonce() uint32 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *ClientQueryDLockResponse) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *ClientQueryDLockResponse) GetExpire() int64 {
	if x != nil {
		return x.Expire
	}
	return 0
}

func (x *ClientQueryDLockResponse) GetPendingNum() int32 {
	if x != nil {
		return x.PendingNum
	}
	return 0
}

type ClientReleaseDLockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the name of dlock
	LockName string `protobuf:"bytes,1,opt,name=lockName,proto3" json:"lockName,omitempty"`
	// the suffix for clientId (ip+suffix)
	ClientIDSuffix string `protobuf:"bytes,2,opt,name=clientIDSuffix,proto3" json:"clientIDSuffix,omitempty"`
}

func (x *ClientReleaseDLockRequest) Reset() {
	*x = ClientReleaseDLockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_clientModelsDLock_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientReleaseDLockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientReleaseDLockRequest) ProtoMessage() {}

func (x *ClientReleaseDLockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_clientModelsDLock_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientReleaseDLockRequest.ProtoReflect.Descriptor instead.
func (*ClientReleaseDLockRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_clientModelsDLock_proto_rawDescGZIP(), []int{4}
}

func (x *ClientReleaseDLockRequest) GetLockName() string {
	if x != nil {
		return x.LockName
	}
	return ""
}

func (x *ClientReleaseDLockRequest) GetClientIDSuffix() string {
	if x != nil {
		return x.ClientIDSuffix
	}
	return ""
}

type ClientReleaseDLockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// released is true iff
	// 1. the specific dlock has already been released
	// 2. a release LogEntry is appended successfully (but may not be committed yet)
	Released bool `protobuf:"varint,1,opt,name=released,proto3" json:"released,omitempty"`
	// if the requested peer is not the current leader, return the leader ip:port
	CurrentLeader string `protobuf:"bytes,2,opt,name=currentLeader,proto3" json:"currentLeader,omitempty"`
}

func (x *ClientReleaseDLockResponse) Reset() {
	*x = ClientReleaseDLockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_clientModelsDLock_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientReleaseDLockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientReleaseDLockResponse) ProtoMessage() {}

func (x *ClientReleaseDLockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_clientModelsDLock_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientReleaseDLockResponse.ProtoReflect.Descriptor instead.
func (*ClientReleaseDLockResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_clientModelsDLock_proto_rawDescGZIP(), []int{5}
}

func (x *ClientReleaseDLockResponse) GetReleased() bool {
	if x != nil {
		return x.Released
	}
	return false
}

func (x *ClientReleaseDLockResponse) GetCurrentLeader() string {
	if x != nil {
		return x.CurrentLeader
	}
	return ""
}

var File_protobuf_clientModelsDLock_proto protoreflect.FileDescriptor

var file_protobuf_clientModelsDLock_proto_rawDesc = []byte{
	0x0a, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x44, 0x4c, 0x6f, 0x63, 0x6b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x22, 0x93, 0x01, 0x0a,
	0x19, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x44, 0x4c,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f,
	0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f,
	0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x44, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x16,
	0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x22, 0x78, 0x0a, 0x1a, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x44, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x35, 0x0a, 0x17,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x4c, 0x6f, 0x63, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x6b, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x6b, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x9c, 0x01, 0x0a, 0x18, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x44, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6d,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4e,
	0x75, 0x6d, 0x22, 0x5f, 0x0a, 0x19, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x44, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x53, 0x75, 0x66,
	0x66, 0x69, 0x78, 0x22, 0x5e, 0x0a, 0x1a, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x44, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x12, 0x24, 0x0a,
	0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x42, 0x20, 0x5a, 0x1e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x61, 0x66, 0x74, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protobuf_clientModelsDLock_proto_rawDescOnce sync.Once
	file_protobuf_clientModelsDLock_proto_rawDescData = file_protobuf_clientModelsDLock_proto_rawDesc
)

func file_protobuf_clientModelsDLock_proto_rawDescGZIP() []byte {
	file_protobuf_clientModelsDLock_proto_rawDescOnce.Do(func() {
		file_protobuf_clientModelsDLock_proto_rawDescData = protoimpl.X.CompressGZIP(file_protobuf_clientModelsDLock_proto_rawDescData)
	})
	return file_protobuf_clientModelsDLock_proto_rawDescData
}

var file_protobuf_clientModelsDLock_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_protobuf_clientModelsDLock_proto_goTypes = []interface{}{
	(*ClientAcquireDLockRequest)(nil),  // 0: protobuf.ClientAcquireDLockRequest
	(*ClientAcquireDLockResponse)(nil), // 1: protobuf.ClientAcquireDLockResponse
	(*ClientQueryDLockRequest)(nil),    // 2: protobuf.ClientQueryDLockRequest
	(*ClientQueryDLockResponse)(nil),   // 3: protobuf.ClientQueryDLockResponse
	(*ClientReleaseDLockRequest)(nil),  // 4: protobuf.ClientReleaseDLockRequest
	(*ClientReleaseDLockResponse)(nil), // 5: protobuf.ClientReleaseDLockResponse
}
var file_protobuf_clientModelsDLock_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_protobuf_clientModelsDLock_proto_init() }
func file_protobuf_clientModelsDLock_proto_init() {
	if File_protobuf_clientModelsDLock_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protobuf_clientModelsDLock_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientAcquireDLockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_clientModelsDLock_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientAcquireDLockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_clientModelsDLock_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientQueryDLockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_clientModelsDLock_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientQueryDLockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_clientModelsDLock_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientReleaseDLockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_clientModelsDLock_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientReleaseDLockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protobuf_clientModelsDLock_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_protobuf_clientModelsDLock_proto_goTypes,
		DependencyIndexes: file_protobuf_clientModelsDLock_proto_depIdxs,
		MessageInfos:      file_protobuf_clientModelsDLock_proto_msgTypes,
	}.Build()
	File_protobuf_clientModelsDLock_proto = out.File
	file_protobuf_clientModelsDLock_proto_rawDesc = nil
	file_protobuf_clientModelsDLock_proto_goTypes = nil
	file_protobuf_clientModelsDLock_proto_depIdxs = nil
}
